// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/learn/learn.proto

package learn

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type FindRequest struct {
	Query                string   `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindRequest) Reset()         { *m = FindRequest{} }
func (m *FindRequest) String() string { return proto.CompactTextString(m) }
func (*FindRequest) ProtoMessage()    {}
func (*FindRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0ce6eee3d379852, []int{0}
}

func (m *FindRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindRequest.Unmarshal(m, b)
}
func (m *FindRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindRequest.Marshal(b, m, deterministic)
}
func (m *FindRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindRequest.Merge(m, src)
}
func (m *FindRequest) XXX_Size() int {
	return xxx_messageInfo_FindRequest.Size(m)
}
func (m *FindRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FindRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FindRequest proto.InternalMessageInfo

func (m *FindRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

type GetRequest struct {
	XId                  string   `protobuf:"bytes,1,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
	Query                string   `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRequest) Reset()         { *m = GetRequest{} }
func (m *GetRequest) String() string { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()    {}
func (*GetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0ce6eee3d379852, []int{1}
}

func (m *GetRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRequest.Unmarshal(m, b)
}
func (m *GetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRequest.Marshal(b, m, deterministic)
}
func (m *GetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRequest.Merge(m, src)
}
func (m *GetRequest) XXX_Size() int {
	return xxx_messageInfo_GetRequest.Size(m)
}
func (m *GetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRequest proto.InternalMessageInfo

func (m *GetRequest) GetXId() string {
	if m != nil {
		return m.XId
	}
	return ""
}

func (m *GetRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

type CreateLanguageRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	FlageUrl             string   `protobuf:"bytes,2,opt,name=flageUrl,proto3" json:"flageUrl,omitempty"`
	Alias                *Alias   `protobuf:"bytes,3,opt,name=alias,proto3" json:"alias,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateLanguageRequest) Reset()         { *m = CreateLanguageRequest{} }
func (m *CreateLanguageRequest) String() string { return proto.CompactTextString(m) }
func (*CreateLanguageRequest) ProtoMessage()    {}
func (*CreateLanguageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0ce6eee3d379852, []int{2}
}

func (m *CreateLanguageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateLanguageRequest.Unmarshal(m, b)
}
func (m *CreateLanguageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateLanguageRequest.Marshal(b, m, deterministic)
}
func (m *CreateLanguageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateLanguageRequest.Merge(m, src)
}
func (m *CreateLanguageRequest) XXX_Size() int {
	return xxx_messageInfo_CreateLanguageRequest.Size(m)
}
func (m *CreateLanguageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateLanguageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateLanguageRequest proto.InternalMessageInfo

func (m *CreateLanguageRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateLanguageRequest) GetFlageUrl() string {
	if m != nil {
		return m.FlageUrl
	}
	return ""
}

func (m *CreateLanguageRequest) GetAlias() *Alias {
	if m != nil {
		return m.Alias
	}
	return nil
}

type UpdateLanguageRequest struct {
	Query                string                 `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Obj                  *CreateLanguageRequest `protobuf:"bytes,2,opt,name=obj,proto3" json:"obj,omitempty"`
	SetObj               *CreateLanguageRequest `protobuf:"bytes,3,opt,name=setObj,proto3" json:"setObj,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *UpdateLanguageRequest) Reset()         { *m = UpdateLanguageRequest{} }
func (m *UpdateLanguageRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateLanguageRequest) ProtoMessage()    {}
func (*UpdateLanguageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0ce6eee3d379852, []int{3}
}

func (m *UpdateLanguageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateLanguageRequest.Unmarshal(m, b)
}
func (m *UpdateLanguageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateLanguageRequest.Marshal(b, m, deterministic)
}
func (m *UpdateLanguageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateLanguageRequest.Merge(m, src)
}
func (m *UpdateLanguageRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateLanguageRequest.Size(m)
}
func (m *UpdateLanguageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateLanguageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateLanguageRequest proto.InternalMessageInfo

func (m *UpdateLanguageRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *UpdateLanguageRequest) GetObj() *CreateLanguageRequest {
	if m != nil {
		return m.Obj
	}
	return nil
}

func (m *UpdateLanguageRequest) GetSetObj() *CreateLanguageRequest {
	if m != nil {
		return m.SetObj
	}
	return nil
}

type UpdateLanguageByIdRequest struct {
	XId                  string                 `protobuf:"bytes,1,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
	Obj                  *CreateLanguageRequest `protobuf:"bytes,2,opt,name=obj,proto3" json:"obj,omitempty"`
	SetObj               *CreateLanguageRequest `protobuf:"bytes,3,opt,name=setObj,proto3" json:"setObj,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *UpdateLanguageByIdRequest) Reset()         { *m = UpdateLanguageByIdRequest{} }
func (m *UpdateLanguageByIdRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateLanguageByIdRequest) ProtoMessage()    {}
func (*UpdateLanguageByIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0ce6eee3d379852, []int{4}
}

func (m *UpdateLanguageByIdRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateLanguageByIdRequest.Unmarshal(m, b)
}
func (m *UpdateLanguageByIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateLanguageByIdRequest.Marshal(b, m, deterministic)
}
func (m *UpdateLanguageByIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateLanguageByIdRequest.Merge(m, src)
}
func (m *UpdateLanguageByIdRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateLanguageByIdRequest.Size(m)
}
func (m *UpdateLanguageByIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateLanguageByIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateLanguageByIdRequest proto.InternalMessageInfo

func (m *UpdateLanguageByIdRequest) GetXId() string {
	if m != nil {
		return m.XId
	}
	return ""
}

func (m *UpdateLanguageByIdRequest) GetObj() *CreateLanguageRequest {
	if m != nil {
		return m.Obj
	}
	return nil
}

func (m *UpdateLanguageByIdRequest) GetSetObj() *CreateLanguageRequest {
	if m != nil {
		return m.SetObj
	}
	return nil
}

type DeleteResult struct {
	State                bool     `protobuf:"varint,1,opt,name=state,proto3" json:"state,omitempty"`
	Num                  int32    `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteResult) Reset()         { *m = DeleteResult{} }
func (m *DeleteResult) String() string { return proto.CompactTextString(m) }
func (*DeleteResult) ProtoMessage()    {}
func (*DeleteResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0ce6eee3d379852, []int{5}
}

func (m *DeleteResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteResult.Unmarshal(m, b)
}
func (m *DeleteResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteResult.Marshal(b, m, deterministic)
}
func (m *DeleteResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteResult.Merge(m, src)
}
func (m *DeleteResult) XXX_Size() int {
	return xxx_messageInfo_DeleteResult.Size(m)
}
func (m *DeleteResult) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteResult.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteResult proto.InternalMessageInfo

func (m *DeleteResult) GetState() bool {
	if m != nil {
		return m.State
	}
	return false
}

func (m *DeleteResult) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

type Language struct {
	XId                  string   `protobuf:"bytes,1,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	FlageUrl             string   `protobuf:"bytes,3,opt,name=flageUrl,proto3" json:"flageUrl,omitempty"`
	CreatedAt            string   `protobuf:"bytes,13,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt            string   `protobuf:"bytes,14,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	DeletedAt            string   `protobuf:"bytes,15,opt,name=deletedAt,proto3" json:"deletedAt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Language) Reset()         { *m = Language{} }
func (m *Language) String() string { return proto.CompactTextString(m) }
func (*Language) ProtoMessage()    {}
func (*Language) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0ce6eee3d379852, []int{6}
}

func (m *Language) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Language.Unmarshal(m, b)
}
func (m *Language) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Language.Marshal(b, m, deterministic)
}
func (m *Language) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Language.Merge(m, src)
}
func (m *Language) XXX_Size() int {
	return xxx_messageInfo_Language.Size(m)
}
func (m *Language) XXX_DiscardUnknown() {
	xxx_messageInfo_Language.DiscardUnknown(m)
}

var xxx_messageInfo_Language proto.InternalMessageInfo

func (m *Language) GetXId() string {
	if m != nil {
		return m.XId
	}
	return ""
}

func (m *Language) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Language) GetFlageUrl() string {
	if m != nil {
		return m.FlageUrl
	}
	return ""
}

func (m *Language) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Language) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *Language) GetDeletedAt() string {
	if m != nil {
		return m.DeletedAt
	}
	return ""
}

type Topic struct {
	XId                  string   `protobuf:"bytes,1,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
	LanguageId           string   `protobuf:"bytes,2,opt,name=language_id,json=languageId,proto3" json:"language_id,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Collection           string   `protobuf:"bytes,4,opt,name=collection,proto3" json:"collection,omitempty"`
	IconUrl              string   `protobuf:"bytes,5,opt,name=iconUrl,proto3" json:"iconUrl,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Topic) Reset()         { *m = Topic{} }
func (m *Topic) String() string { return proto.CompactTextString(m) }
func (*Topic) ProtoMessage()    {}
func (*Topic) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0ce6eee3d379852, []int{7}
}

func (m *Topic) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Topic.Unmarshal(m, b)
}
func (m *Topic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Topic.Marshal(b, m, deterministic)
}
func (m *Topic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Topic.Merge(m, src)
}
func (m *Topic) XXX_Size() int {
	return xxx_messageInfo_Topic.Size(m)
}
func (m *Topic) XXX_DiscardUnknown() {
	xxx_messageInfo_Topic.DiscardUnknown(m)
}

var xxx_messageInfo_Topic proto.InternalMessageInfo

func (m *Topic) GetXId() string {
	if m != nil {
		return m.XId
	}
	return ""
}

func (m *Topic) GetLanguageId() string {
	if m != nil {
		return m.LanguageId
	}
	return ""
}

func (m *Topic) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Topic) GetCollection() string {
	if m != nil {
		return m.Collection
	}
	return ""
}

func (m *Topic) GetIconUrl() string {
	if m != nil {
		return m.IconUrl
	}
	return ""
}

type CreateTopicRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	FlageUrl             string   `protobuf:"bytes,2,opt,name=flageUrl,proto3" json:"flageUrl,omitempty"`
	Alias                *Alias   `protobuf:"bytes,3,opt,name=alias,proto3" json:"alias,omitempty"`
	Any                  *any.Any `protobuf:"bytes,7,opt,name=any,proto3" json:"any,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateTopicRequest) Reset()         { *m = CreateTopicRequest{} }
func (m *CreateTopicRequest) String() string { return proto.CompactTextString(m) }
func (*CreateTopicRequest) ProtoMessage()    {}
func (*CreateTopicRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0ce6eee3d379852, []int{8}
}

func (m *CreateTopicRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateTopicRequest.Unmarshal(m, b)
}
func (m *CreateTopicRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateTopicRequest.Marshal(b, m, deterministic)
}
func (m *CreateTopicRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateTopicRequest.Merge(m, src)
}
func (m *CreateTopicRequest) XXX_Size() int {
	return xxx_messageInfo_CreateTopicRequest.Size(m)
}
func (m *CreateTopicRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateTopicRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateTopicRequest proto.InternalMessageInfo

func (m *CreateTopicRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateTopicRequest) GetFlageUrl() string {
	if m != nil {
		return m.FlageUrl
	}
	return ""
}

func (m *CreateTopicRequest) GetAlias() *Alias {
	if m != nil {
		return m.Alias
	}
	return nil
}

func (m *CreateTopicRequest) GetAny() *any.Any {
	if m != nil {
		return m.Any
	}
	return nil
}

type UpdateTopicRequest struct {
	Query                string              `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Obj                  *CreateTopicRequest `protobuf:"bytes,2,opt,name=obj,proto3" json:"obj,omitempty"`
	SetObj               *CreateTopicRequest `protobuf:"bytes,3,opt,name=setObj,proto3" json:"setObj,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *UpdateTopicRequest) Reset()         { *m = UpdateTopicRequest{} }
func (m *UpdateTopicRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateTopicRequest) ProtoMessage()    {}
func (*UpdateTopicRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0ce6eee3d379852, []int{9}
}

func (m *UpdateTopicRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateTopicRequest.Unmarshal(m, b)
}
func (m *UpdateTopicRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateTopicRequest.Marshal(b, m, deterministic)
}
func (m *UpdateTopicRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateTopicRequest.Merge(m, src)
}
func (m *UpdateTopicRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateTopicRequest.Size(m)
}
func (m *UpdateTopicRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateTopicRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateTopicRequest proto.InternalMessageInfo

func (m *UpdateTopicRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *UpdateTopicRequest) GetObj() *CreateTopicRequest {
	if m != nil {
		return m.Obj
	}
	return nil
}

func (m *UpdateTopicRequest) GetSetObj() *CreateTopicRequest {
	if m != nil {
		return m.SetObj
	}
	return nil
}

type UpdateTopicByIdRequest struct {
	XId                  string              `protobuf:"bytes,1,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
	Obj                  *CreateTopicRequest `protobuf:"bytes,2,opt,name=obj,proto3" json:"obj,omitempty"`
	SetObj               *CreateTopicRequest `protobuf:"bytes,3,opt,name=setObj,proto3" json:"setObj,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *UpdateTopicByIdRequest) Reset()         { *m = UpdateTopicByIdRequest{} }
func (m *UpdateTopicByIdRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateTopicByIdRequest) ProtoMessage()    {}
func (*UpdateTopicByIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0ce6eee3d379852, []int{10}
}

func (m *UpdateTopicByIdRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateTopicByIdRequest.Unmarshal(m, b)
}
func (m *UpdateTopicByIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateTopicByIdRequest.Marshal(b, m, deterministic)
}
func (m *UpdateTopicByIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateTopicByIdRequest.Merge(m, src)
}
func (m *UpdateTopicByIdRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateTopicByIdRequest.Size(m)
}
func (m *UpdateTopicByIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateTopicByIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateTopicByIdRequest proto.InternalMessageInfo

func (m *UpdateTopicByIdRequest) GetXId() string {
	if m != nil {
		return m.XId
	}
	return ""
}

func (m *UpdateTopicByIdRequest) GetObj() *CreateTopicRequest {
	if m != nil {
		return m.Obj
	}
	return nil
}

func (m *UpdateTopicByIdRequest) GetSetObj() *CreateTopicRequest {
	if m != nil {
		return m.SetObj
	}
	return nil
}

type Card struct {
	XId                  string   `protobuf:"bytes,1,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
	LanguageId           string   `protobuf:"bytes,2,opt,name=language_id,json=languageId,proto3" json:"language_id,omitempty"`
	TopicId              string   `protobuf:"bytes,3,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Name                 string   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Collection           string   `protobuf:"bytes,5,opt,name=collection,proto3" json:"collection,omitempty"`
	IconUrl              string   `protobuf:"bytes,6,opt,name=iconUrl,proto3" json:"iconUrl,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Card) Reset()         { *m = Card{} }
func (m *Card) String() string { return proto.CompactTextString(m) }
func (*Card) ProtoMessage()    {}
func (*Card) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0ce6eee3d379852, []int{11}
}

func (m *Card) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Card.Unmarshal(m, b)
}
func (m *Card) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Card.Marshal(b, m, deterministic)
}
func (m *Card) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Card.Merge(m, src)
}
func (m *Card) XXX_Size() int {
	return xxx_messageInfo_Card.Size(m)
}
func (m *Card) XXX_DiscardUnknown() {
	xxx_messageInfo_Card.DiscardUnknown(m)
}

var xxx_messageInfo_Card proto.InternalMessageInfo

func (m *Card) GetXId() string {
	if m != nil {
		return m.XId
	}
	return ""
}

func (m *Card) GetLanguageId() string {
	if m != nil {
		return m.LanguageId
	}
	return ""
}

func (m *Card) GetTopicId() string {
	if m != nil {
		return m.TopicId
	}
	return ""
}

func (m *Card) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Card) GetCollection() string {
	if m != nil {
		return m.Collection
	}
	return ""
}

func (m *Card) GetIconUrl() string {
	if m != nil {
		return m.IconUrl
	}
	return ""
}

type CreateCardRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Collection           string   `protobuf:"bytes,2,opt,name=collection,proto3" json:"collection,omitempty"`
	IconUrl              string   `protobuf:"bytes,3,opt,name=iconUrl,proto3" json:"iconUrl,omitempty"`
	Any                  *any.Any `protobuf:"bytes,7,opt,name=any,proto3" json:"any,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateCardRequest) Reset()         { *m = CreateCardRequest{} }
func (m *CreateCardRequest) String() string { return proto.CompactTextString(m) }
func (*CreateCardRequest) ProtoMessage()    {}
func (*CreateCardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0ce6eee3d379852, []int{12}
}

func (m *CreateCardRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateCardRequest.Unmarshal(m, b)
}
func (m *CreateCardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateCardRequest.Marshal(b, m, deterministic)
}
func (m *CreateCardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateCardRequest.Merge(m, src)
}
func (m *CreateCardRequest) XXX_Size() int {
	return xxx_messageInfo_CreateCardRequest.Size(m)
}
func (m *CreateCardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateCardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateCardRequest proto.InternalMessageInfo

func (m *CreateCardRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateCardRequest) GetCollection() string {
	if m != nil {
		return m.Collection
	}
	return ""
}

func (m *CreateCardRequest) GetIconUrl() string {
	if m != nil {
		return m.IconUrl
	}
	return ""
}

func (m *CreateCardRequest) GetAny() *any.Any {
	if m != nil {
		return m.Any
	}
	return nil
}

type UpdateCardRequest struct {
	Query                string             `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Obj                  *CreateCardRequest `protobuf:"bytes,2,opt,name=obj,proto3" json:"obj,omitempty"`
	SetObj               *CreateCardRequest `protobuf:"bytes,3,opt,name=setObj,proto3" json:"setObj,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *UpdateCardRequest) Reset()         { *m = UpdateCardRequest{} }
func (m *UpdateCardRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateCardRequest) ProtoMessage()    {}
func (*UpdateCardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0ce6eee3d379852, []int{13}
}

func (m *UpdateCardRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateCardRequest.Unmarshal(m, b)
}
func (m *UpdateCardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateCardRequest.Marshal(b, m, deterministic)
}
func (m *UpdateCardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateCardRequest.Merge(m, src)
}
func (m *UpdateCardRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateCardRequest.Size(m)
}
func (m *UpdateCardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateCardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateCardRequest proto.InternalMessageInfo

func (m *UpdateCardRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *UpdateCardRequest) GetObj() *CreateCardRequest {
	if m != nil {
		return m.Obj
	}
	return nil
}

func (m *UpdateCardRequest) GetSetObj() *CreateCardRequest {
	if m != nil {
		return m.SetObj
	}
	return nil
}

type UpdateCardByIdRequest struct {
	XId                  string             `protobuf:"bytes,1,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
	Obj                  *CreateCardRequest `protobuf:"bytes,2,opt,name=obj,proto3" json:"obj,omitempty"`
	SetObj               *CreateCardRequest `protobuf:"bytes,3,opt,name=setObj,proto3" json:"setObj,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *UpdateCardByIdRequest) Reset()         { *m = UpdateCardByIdRequest{} }
func (m *UpdateCardByIdRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateCardByIdRequest) ProtoMessage()    {}
func (*UpdateCardByIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0ce6eee3d379852, []int{14}
}

func (m *UpdateCardByIdRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateCardByIdRequest.Unmarshal(m, b)
}
func (m *UpdateCardByIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateCardByIdRequest.Marshal(b, m, deterministic)
}
func (m *UpdateCardByIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateCardByIdRequest.Merge(m, src)
}
func (m *UpdateCardByIdRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateCardByIdRequest.Size(m)
}
func (m *UpdateCardByIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateCardByIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateCardByIdRequest proto.InternalMessageInfo

func (m *UpdateCardByIdRequest) GetXId() string {
	if m != nil {
		return m.XId
	}
	return ""
}

func (m *UpdateCardByIdRequest) GetObj() *CreateCardRequest {
	if m != nil {
		return m.Obj
	}
	return nil
}

func (m *UpdateCardByIdRequest) GetSetObj() *CreateCardRequest {
	if m != nil {
		return m.SetObj
	}
	return nil
}

type Alias struct {
	Eng                  string   `protobuf:"bytes,1,opt,name=eng,proto3" json:"eng,omitempty"`
	Zh                   string   `protobuf:"bytes,2,opt,name=zh,proto3" json:"zh,omitempty"`
	Esp                  string   `protobuf:"bytes,3,opt,name=esp,proto3" json:"esp,omitempty"`
	Pe                   string   `protobuf:"bytes,4,opt,name=pe,proto3" json:"pe,omitempty"`
	Arb                  string   `protobuf:"bytes,5,opt,name=arb,proto3" json:"arb,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Alias) Reset()         { *m = Alias{} }
func (m *Alias) String() string { return proto.CompactTextString(m) }
func (*Alias) ProtoMessage()    {}
func (*Alias) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0ce6eee3d379852, []int{15}
}

func (m *Alias) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Alias.Unmarshal(m, b)
}
func (m *Alias) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Alias.Marshal(b, m, deterministic)
}
func (m *Alias) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Alias.Merge(m, src)
}
func (m *Alias) XXX_Size() int {
	return xxx_messageInfo_Alias.Size(m)
}
func (m *Alias) XXX_DiscardUnknown() {
	xxx_messageInfo_Alias.DiscardUnknown(m)
}

var xxx_messageInfo_Alias proto.InternalMessageInfo

func (m *Alias) GetEng() string {
	if m != nil {
		return m.Eng
	}
	return ""
}

func (m *Alias) GetZh() string {
	if m != nil {
		return m.Zh
	}
	return ""
}

func (m *Alias) GetEsp() string {
	if m != nil {
		return m.Esp
	}
	return ""
}

func (m *Alias) GetPe() string {
	if m != nil {
		return m.Pe
	}
	return ""
}

func (m *Alias) GetArb() string {
	if m != nil {
		return m.Arb
	}
	return ""
}

type HelloRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloRequest) Reset()         { *m = HelloRequest{} }
func (m *HelloRequest) String() string { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()    {}
func (*HelloRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0ce6eee3d379852, []int{16}
}

func (m *HelloRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloRequest.Unmarshal(m, b)
}
func (m *HelloRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloRequest.Marshal(b, m, deterministic)
}
func (m *HelloRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloRequest.Merge(m, src)
}
func (m *HelloRequest) XXX_Size() int {
	return xxx_messageInfo_HelloRequest.Size(m)
}
func (m *HelloRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HelloRequest proto.InternalMessageInfo

func (m *HelloRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type HelloReply struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloReply) Reset()         { *m = HelloReply{} }
func (m *HelloReply) String() string { return proto.CompactTextString(m) }
func (*HelloReply) ProtoMessage()    {}
func (*HelloReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0ce6eee3d379852, []int{17}
}

func (m *HelloReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloReply.Unmarshal(m, b)
}
func (m *HelloReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloReply.Marshal(b, m, deterministic)
}
func (m *HelloReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloReply.Merge(m, src)
}
func (m *HelloReply) XXX_Size() int {
	return xxx_messageInfo_HelloReply.Size(m)
}
func (m *HelloReply) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloReply.DiscardUnknown(m)
}

var xxx_messageInfo_HelloReply proto.InternalMessageInfo

func (m *HelloReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*FindRequest)(nil), "learn.FindRequest")
	proto.RegisterType((*GetRequest)(nil), "learn.GetRequest")
	proto.RegisterType((*CreateLanguageRequest)(nil), "learn.CreateLanguageRequest")
	proto.RegisterType((*UpdateLanguageRequest)(nil), "learn.UpdateLanguageRequest")
	proto.RegisterType((*UpdateLanguageByIdRequest)(nil), "learn.UpdateLanguageByIdRequest")
	proto.RegisterType((*DeleteResult)(nil), "learn.DeleteResult")
	proto.RegisterType((*Language)(nil), "learn.Language")
	proto.RegisterType((*Topic)(nil), "learn.Topic")
	proto.RegisterType((*CreateTopicRequest)(nil), "learn.CreateTopicRequest")
	proto.RegisterType((*UpdateTopicRequest)(nil), "learn.UpdateTopicRequest")
	proto.RegisterType((*UpdateTopicByIdRequest)(nil), "learn.UpdateTopicByIdRequest")
	proto.RegisterType((*Card)(nil), "learn.Card")
	proto.RegisterType((*CreateCardRequest)(nil), "learn.CreateCardRequest")
	proto.RegisterType((*UpdateCardRequest)(nil), "learn.UpdateCardRequest")
	proto.RegisterType((*UpdateCardByIdRequest)(nil), "learn.UpdateCardByIdRequest")
	proto.RegisterType((*Alias)(nil), "learn.alias")
	proto.RegisterType((*HelloRequest)(nil), "learn.HelloRequest")
	proto.RegisterType((*HelloReply)(nil), "learn.HelloReply")
}

func init() { proto.RegisterFile("proto/learn/learn.proto", fileDescriptor_c0ce6eee3d379852) }

var fileDescriptor_c0ce6eee3d379852 = []byte{
	// 923 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0xdd, 0x4e, 0xe3, 0x46,
	0x14, 0xc6, 0x71, 0x02, 0xe1, 0x24, 0x24, 0x64, 0x0a, 0x6d, 0x88, 0x50, 0x8b, 0x5c, 0x89, 0xa2,
	0x56, 0x4a, 0xf8, 0x6b, 0x53, 0x15, 0xa9, 0x12, 0x50, 0x35, 0x45, 0x42, 0xaa, 0x64, 0xca, 0x65,
	0xb5, 0x72, 0xe2, 0x21, 0x98, 0x35, 0xb6, 0xf1, 0xcf, 0x4a, 0xe6, 0x01, 0x16, 0xb1, 0x57, 0xab,
	0xdd, 0x27, 0xd8, 0x8b, 0x7d, 0x84, 0x7d, 0xbf, 0xd5, 0xfc, 0x39, 0xe3, 0xc4, 0xb6, 0xc8, 0x4a,
	0xec, 0x4d, 0xe4, 0x39, 0xff, 0x67, 0xbe, 0x6f, 0xce, 0x09, 0x7c, 0xe7, 0xf9, 0x6e, 0xe8, 0xf6,
	0x6c, 0x6c, 0xf8, 0x0e, 0xfb, 0xed, 0x52, 0x09, 0xaa, 0xd0, 0x43, 0xe7, 0x27, 0xa6, 0xb7, 0x9c,
	0x91, 0x1d, 0x99, 0xb8, 0x37, 0x76, 0xdd, 0xb1, 0x8d, 0x7b, 0x54, 0x38, 0x8c, 0xae, 0x7a, 0x86,
	0x13, 0x33, 0x7b, 0xed, 0x47, 0xa8, 0xfd, 0x6d, 0x39, 0xa6, 0x8e, 0xef, 0x22, 0x1c, 0x84, 0x68,
	0x0d, 0x2a, 0x77, 0x11, 0xf6, 0xe3, 0xb6, 0xb2, 0xa5, 0xec, 0x2c, 0xeb, 0xec, 0xa0, 0x1d, 0x00,
	0x0c, 0x70, 0x28, 0x6c, 0x9a, 0xa0, 0xbe, 0xb0, 0x4c, 0x6e, 0x51, 0x3a, 0x33, 0x27, 0x4e, 0x25,
	0xd9, 0xe9, 0x25, 0xac, 0x9f, 0xfa, 0xd8, 0x08, 0xf1, 0xb9, 0xe1, 0x8c, 0x23, 0x63, 0x8c, 0x85,
	0x3f, 0x82, 0xb2, 0x63, 0xdc, 0x62, 0x1e, 0x80, 0x7e, 0xa3, 0x0e, 0x54, 0xaf, 0x6c, 0x63, 0x8c,
	0x2f, 0x7d, 0x9b, 0x47, 0x49, 0xce, 0x48, 0x83, 0x8a, 0x61, 0x5b, 0x46, 0xd0, 0x56, 0xb7, 0x94,
	0x9d, 0xda, 0x7e, 0xbd, 0xcb, 0xfa, 0xa5, 0x32, 0x9d, 0xa9, 0xb4, 0xf7, 0x0a, 0xac, 0x5f, 0x7a,
	0x66, 0x46, 0xb6, 0xcc, 0x8e, 0x50, 0x17, 0x54, 0x77, 0x78, 0x43, 0x53, 0xd5, 0xf6, 0x37, 0x79,
	0xc4, 0xcc, 0x72, 0x75, 0x62, 0x88, 0x0e, 0x61, 0x31, 0xc0, 0xe1, 0xbf, 0xc3, 0x1b, 0x5e, 0x44,
	0xb1, 0x0b, 0xb7, 0xd5, 0xde, 0x29, 0xb0, 0x91, 0xae, 0xea, 0x24, 0x3e, 0x33, 0x73, 0xef, 0xf1,
	0xeb, 0x14, 0xf5, 0x1b, 0xd4, 0xff, 0xc2, 0x36, 0x0e, 0xb1, 0x8e, 0x83, 0xc8, 0xa6, 0x17, 0x14,
	0x84, 0x46, 0xc8, 0xf0, 0xa8, 0xea, 0xec, 0x80, 0x56, 0x41, 0x75, 0xa2, 0x5b, 0x5a, 0x4b, 0x45,
	0x27, 0x9f, 0xda, 0x47, 0x05, 0xaa, 0x22, 0xe6, 0x6c, 0xed, 0x02, 0xd4, 0x52, 0x0e, 0xa8, 0xea,
	0x14, 0xa8, 0x9b, 0xb0, 0x3c, 0xa2, 0x65, 0x9a, 0xc7, 0x61, 0x7b, 0x85, 0x2a, 0x27, 0x02, 0xa2,
	0x8d, 0xe8, 0xbd, 0x11, 0x6d, 0x83, 0x69, 0x13, 0x01, 0xd1, 0x9a, 0xb4, 0x03, 0xa2, 0x6d, 0x32,
	0x6d, 0x22, 0xd0, 0x1e, 0x14, 0xa8, 0xfc, 0xe7, 0x7a, 0xd6, 0x68, 0xb6, 0xc8, 0x1f, 0xa0, 0x66,
	0xf3, 0x0e, 0x88, 0x82, 0xd5, 0x0a, 0x42, 0x24, 0x75, 0xa1, 0x4a, 0x5d, 0x7c, 0x0f, 0x30, 0x72,
	0x6d, 0x1b, 0x8f, 0x42, 0xcb, 0x75, 0xda, 0x65, 0xe6, 0x33, 0x91, 0xa0, 0x36, 0x2c, 0x59, 0x23,
	0xd7, 0x21, 0x4d, 0x56, 0xa8, 0x52, 0x1c, 0xb5, 0xb7, 0x0a, 0x20, 0x86, 0x05, 0xad, 0xe7, 0x19,
	0xf9, 0x8f, 0xb6, 0x41, 0x35, 0x9c, 0xb8, 0xbd, 0x44, 0x2d, 0xd6, 0xba, 0xec, 0xbd, 0x77, 0xc5,
	0x7b, 0xef, 0x1e, 0x3b, 0xb1, 0x4e, 0x0c, 0xb4, 0x37, 0x0a, 0x20, 0xc6, 0xc8, 0x54, 0x49, 0xd9,
	0x8f, 0xe4, 0x17, 0x99, 0x8f, 0x1b, 0x29, 0x72, 0xc9, 0xde, 0x8c, 0x8c, 0x7b, 0x53, 0x64, 0x2c,
	0xb0, 0x17, 0x4c, 0x7c, 0x54, 0xe0, 0x5b, 0xa9, 0x98, 0xc2, 0xb7, 0xf1, 0xdc, 0xb5, 0x7c, 0x50,
	0xa0, 0x7c, 0x6a, 0xf8, 0xe6, 0x17, 0x90, 0x66, 0x03, 0xaa, 0x21, 0x09, 0x49, 0xb4, 0x8c, 0x38,
	0x4b, 0xf4, 0x2c, 0xf1, 0xa9, 0x9c, 0xcb, 0xa7, 0x4a, 0x11, 0x9f, 0x16, 0xd3, 0x7c, 0x7a, 0x54,
	0xa0, 0xc5, 0x5a, 0x20, 0x95, 0x16, 0xd1, 0x29, 0x9d, 0xa3, 0x54, 0x94, 0x43, 0x4d, 0xe5, 0x78,
	0x32, 0x91, 0x1e, 0x14, 0x68, 0x31, 0xec, 0xe4, 0x5a, 0xb2, 0x79, 0xf4, 0xb3, 0x8c, 0x5d, 0x3b,
	0x85, 0x85, 0xe4, 0xcc, 0xa0, 0xdb, 0x9d, 0x82, 0x2e, 0xdf, 0x5c, 0x20, 0xf7, 0x3a, 0x19, 0xfd,
	0x44, 0x5b, 0x48, 0xa2, 0xe7, 0x2d, 0xe4, 0x7f, 0xfe, 0x4e, 0xc9, 0xec, 0xc4, 0xce, 0x98, 0xe7,
	0x25, 0x9f, 0xa8, 0x01, 0xa5, 0xfb, 0x6b, 0x8e, 0x43, 0xe9, 0xfe, 0x9a, 0x5a, 0x04, 0x1e, 0xbf,
	0x7b, 0xf2, 0x49, 0x2c, 0x3c, 0xc1, 0x93, 0x92, 0x47, 0xe7, 0xaf, 0xe1, 0x0f, 0x39, 0x3d, 0xc8,
	0xa7, 0xa6, 0x41, 0xfd, 0x1f, 0x6c, 0xdb, 0x6e, 0x01, 0xee, 0xda, 0x36, 0x00, 0xb7, 0xf1, 0xec,
	0x98, 0xa0, 0x7c, 0x8b, 0x83, 0xc0, 0x18, 0x0b, 0x23, 0x71, 0xdc, 0xff, 0x04, 0x50, 0x3f, 0x27,
	0xed, 0x5c, 0x60, 0xff, 0x95, 0x35, 0xc2, 0xe8, 0x08, 0x56, 0xc9, 0xdf, 0x00, 0x31, 0xdf, 0xcf,
	0x2d, 0x92, 0x80, 0x77, 0x2c, 0xfd, 0x3f, 0xe8, 0x34, 0xb9, 0x4c, 0x18, 0x6a, 0x0b, 0xbb, 0x0a,
	0xea, 0x43, 0x73, 0x80, 0x43, 0x79, 0xc5, 0xa1, 0x16, 0xb7, 0x9b, 0xfc, 0x6d, 0xc8, 0x70, 0x45,
	0xc7, 0xd0, 0x48, 0xef, 0x2a, 0x54, 0xb8, 0xc2, 0x72, 0x42, 0xa4, 0x37, 0x6c, 0x12, 0x22, 0xf3,
	0xef, 0x40, 0x56, 0x88, 0x33, 0x31, 0x12, 0x53, 0x1d, 0x6c, 0x65, 0x86, 0x91, 0xe8, 0x95, 0x15,
	0xea, 0x08, 0x1a, 0x6c, 0xb7, 0x26, 0xd5, 0x64, 0x5d, 0xe2, 0x37, 0x5c, 0x26, 0xaf, 0x61, 0x6d,
	0x01, 0xfd, 0x09, 0x28, 0xed, 0x9c, 0x77, 0x93, 0x39, 0xfe, 0xbf, 0xc2, 0x0a, 0xc9, 0x42, 0xc7,
	0x5b, 0x2e, 0x80, 0x62, 0x7b, 0x50, 0x2b, 0x8a, 0xde, 0x1e, 0xd4, 0x07, 0x38, 0x4c, 0x26, 0x70,
	0x56, 0xc2, 0x29, 0x27, 0xf4, 0x3b, 0xd4, 0xa4, 0x51, 0x8a, 0xf2, 0xc7, 0x6b, 0x96, 0xa7, 0x34,
	0xf1, 0x13, 0xcf, 0xd9, 0x95, 0x34, 0xe3, 0x79, 0x0a, 0xcd, 0xa9, 0x5d, 0xf1, 0x04, 0x88, 0x32,
	0xd2, 0xb3, 0x4b, 0x63, 0xe9, 0xe7, 0x00, 0xe7, 0x08, 0x9a, 0x92, 0xe7, 0x9c, 0xc8, 0x1c, 0x42,
	0x9d, 0xa4, 0x20, 0x43, 0x63, 0x0e, 0x60, 0x76, 0xa1, 0x36, 0xc0, 0xa1, 0x18, 0x6a, 0x4f, 0xc1,
	0xa5, 0x0f, 0x30, 0x19, 0x4f, 0xf3, 0xc0, 0xd2, 0x07, 0x98, 0x8c, 0xd0, 0x79, 0x50, 0x39, 0x11,
	0xcf, 0x2f, 0x29, 0x73, 0x7e, 0x50, 0xfa, 0x00, 0xec, 0xbe, 0x68, 0xf2, 0x39, 0x30, 0xf9, 0x43,
	0xbc, 0xb6, 0xa2, 0x3b, 0xca, 0x85, 0xa4, 0x7a, 0x61, 0xc4, 0x74, 0x58, 0x22, 0x61, 0x22, 0x8f,
	0xd7, 0x4e, 0x2b, 0x2d, 0xf4, 0xec, 0x58, 0x5b, 0x18, 0x2e, 0xd2, 0x45, 0x78, 0xf0, 0x39, 0x00,
	0x00, 0xff, 0xff, 0x7e, 0x07, 0xa0, 0x14, 0x7f, 0x0d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LearnServiceClient is the client API for LearnService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LearnServiceClient interface {
	// languages model
	FindLanguageList(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (LearnService_FindLanguageListClient, error)
	GetLanguageById(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Language, error)
	CreateLanguage(ctx context.Context, in *CreateLanguageRequest, opts ...grpc.CallOption) (*Language, error)
	UpdateLanguage(ctx context.Context, in *UpdateLanguageRequest, opts ...grpc.CallOption) (*Language, error)
	UpdateLanguageById(ctx context.Context, in *UpdateLanguageByIdRequest, opts ...grpc.CallOption) (*Language, error)
	DeleteLanguage(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*DeleteResult, error)
	DeleteLanguageById(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*DeleteResult, error)
	// topics model
	FindTopicList(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (LearnService_FindTopicListClient, error)
	GetTopicById(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Topic, error)
	CreateTopic(ctx context.Context, in *CreateTopicRequest, opts ...grpc.CallOption) (*Topic, error)
	UpdateTopic(ctx context.Context, in *UpdateTopicRequest, opts ...grpc.CallOption) (*Topic, error)
	UpdateTopicById(ctx context.Context, in *UpdateLanguageByIdRequest, opts ...grpc.CallOption) (*Topic, error)
	DeleteTopic(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*DeleteResult, error)
	DeleteTopicById(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*DeleteResult, error)
	// cards model
	FindCardList(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (LearnService_FindCardListClient, error)
	GetCardById(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Topic, error)
	CreateCard(ctx context.Context, in *CreateTopicRequest, opts ...grpc.CallOption) (*Topic, error)
	UpdateCard(ctx context.Context, in *UpdateTopicRequest, opts ...grpc.CallOption) (*Topic, error)
	UpdateCardById(ctx context.Context, in *UpdateLanguageByIdRequest, opts ...grpc.CallOption) (*Topic, error)
	DeleteCard(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*DeleteResult, error)
	DeleteCardById(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*DeleteResult, error)
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
}

type learnServiceClient struct {
	cc *grpc.ClientConn
}

func NewLearnServiceClient(cc *grpc.ClientConn) LearnServiceClient {
	return &learnServiceClient{cc}
}

func (c *learnServiceClient) FindLanguageList(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (LearnService_FindLanguageListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LearnService_serviceDesc.Streams[0], "/learn.LearnService/FindLanguageList", opts...)
	if err != nil {
		return nil, err
	}
	x := &learnServiceFindLanguageListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LearnService_FindLanguageListClient interface {
	Recv() (*Language, error)
	grpc.ClientStream
}

type learnServiceFindLanguageListClient struct {
	grpc.ClientStream
}

func (x *learnServiceFindLanguageListClient) Recv() (*Language, error) {
	m := new(Language)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *learnServiceClient) GetLanguageById(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Language, error) {
	out := new(Language)
	err := c.cc.Invoke(ctx, "/learn.LearnService/GetLanguageById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learnServiceClient) CreateLanguage(ctx context.Context, in *CreateLanguageRequest, opts ...grpc.CallOption) (*Language, error) {
	out := new(Language)
	err := c.cc.Invoke(ctx, "/learn.LearnService/CreateLanguage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learnServiceClient) UpdateLanguage(ctx context.Context, in *UpdateLanguageRequest, opts ...grpc.CallOption) (*Language, error) {
	out := new(Language)
	err := c.cc.Invoke(ctx, "/learn.LearnService/UpdateLanguage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learnServiceClient) UpdateLanguageById(ctx context.Context, in *UpdateLanguageByIdRequest, opts ...grpc.CallOption) (*Language, error) {
	out := new(Language)
	err := c.cc.Invoke(ctx, "/learn.LearnService/UpdateLanguageById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learnServiceClient) DeleteLanguage(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*DeleteResult, error) {
	out := new(DeleteResult)
	err := c.cc.Invoke(ctx, "/learn.LearnService/DeleteLanguage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learnServiceClient) DeleteLanguageById(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*DeleteResult, error) {
	out := new(DeleteResult)
	err := c.cc.Invoke(ctx, "/learn.LearnService/DeleteLanguageById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learnServiceClient) FindTopicList(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (LearnService_FindTopicListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LearnService_serviceDesc.Streams[1], "/learn.LearnService/FindTopicList", opts...)
	if err != nil {
		return nil, err
	}
	x := &learnServiceFindTopicListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LearnService_FindTopicListClient interface {
	Recv() (*Topic, error)
	grpc.ClientStream
}

type learnServiceFindTopicListClient struct {
	grpc.ClientStream
}

func (x *learnServiceFindTopicListClient) Recv() (*Topic, error) {
	m := new(Topic)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *learnServiceClient) GetTopicById(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Topic, error) {
	out := new(Topic)
	err := c.cc.Invoke(ctx, "/learn.LearnService/GetTopicById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learnServiceClient) CreateTopic(ctx context.Context, in *CreateTopicRequest, opts ...grpc.CallOption) (*Topic, error) {
	out := new(Topic)
	err := c.cc.Invoke(ctx, "/learn.LearnService/CreateTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learnServiceClient) UpdateTopic(ctx context.Context, in *UpdateTopicRequest, opts ...grpc.CallOption) (*Topic, error) {
	out := new(Topic)
	err := c.cc.Invoke(ctx, "/learn.LearnService/UpdateTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learnServiceClient) UpdateTopicById(ctx context.Context, in *UpdateLanguageByIdRequest, opts ...grpc.CallOption) (*Topic, error) {
	out := new(Topic)
	err := c.cc.Invoke(ctx, "/learn.LearnService/UpdateTopicById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learnServiceClient) DeleteTopic(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*DeleteResult, error) {
	out := new(DeleteResult)
	err := c.cc.Invoke(ctx, "/learn.LearnService/DeleteTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learnServiceClient) DeleteTopicById(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*DeleteResult, error) {
	out := new(DeleteResult)
	err := c.cc.Invoke(ctx, "/learn.LearnService/DeleteTopicById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learnServiceClient) FindCardList(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (LearnService_FindCardListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LearnService_serviceDesc.Streams[2], "/learn.LearnService/FindCardList", opts...)
	if err != nil {
		return nil, err
	}
	x := &learnServiceFindCardListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LearnService_FindCardListClient interface {
	Recv() (*Topic, error)
	grpc.ClientStream
}

type learnServiceFindCardListClient struct {
	grpc.ClientStream
}

func (x *learnServiceFindCardListClient) Recv() (*Topic, error) {
	m := new(Topic)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *learnServiceClient) GetCardById(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Topic, error) {
	out := new(Topic)
	err := c.cc.Invoke(ctx, "/learn.LearnService/GetCardById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learnServiceClient) CreateCard(ctx context.Context, in *CreateTopicRequest, opts ...grpc.CallOption) (*Topic, error) {
	out := new(Topic)
	err := c.cc.Invoke(ctx, "/learn.LearnService/CreateCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learnServiceClient) UpdateCard(ctx context.Context, in *UpdateTopicRequest, opts ...grpc.CallOption) (*Topic, error) {
	out := new(Topic)
	err := c.cc.Invoke(ctx, "/learn.LearnService/UpdateCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learnServiceClient) UpdateCardById(ctx context.Context, in *UpdateLanguageByIdRequest, opts ...grpc.CallOption) (*Topic, error) {
	out := new(Topic)
	err := c.cc.Invoke(ctx, "/learn.LearnService/UpdateCardById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learnServiceClient) DeleteCard(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*DeleteResult, error) {
	out := new(DeleteResult)
	err := c.cc.Invoke(ctx, "/learn.LearnService/DeleteCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learnServiceClient) DeleteCardById(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*DeleteResult, error) {
	out := new(DeleteResult)
	err := c.cc.Invoke(ctx, "/learn.LearnService/DeleteCardById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learnServiceClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/learn.LearnService/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LearnServiceServer is the server API for LearnService service.
type LearnServiceServer interface {
	// languages model
	FindLanguageList(*FindRequest, LearnService_FindLanguageListServer) error
	GetLanguageById(context.Context, *GetRequest) (*Language, error)
	CreateLanguage(context.Context, *CreateLanguageRequest) (*Language, error)
	UpdateLanguage(context.Context, *UpdateLanguageRequest) (*Language, error)
	UpdateLanguageById(context.Context, *UpdateLanguageByIdRequest) (*Language, error)
	DeleteLanguage(context.Context, *FindRequest) (*DeleteResult, error)
	DeleteLanguageById(context.Context, *GetRequest) (*DeleteResult, error)
	// topics model
	FindTopicList(*FindRequest, LearnService_FindTopicListServer) error
	GetTopicById(context.Context, *GetRequest) (*Topic, error)
	CreateTopic(context.Context, *CreateTopicRequest) (*Topic, error)
	UpdateTopic(context.Context, *UpdateTopicRequest) (*Topic, error)
	UpdateTopicById(context.Context, *UpdateLanguageByIdRequest) (*Topic, error)
	DeleteTopic(context.Context, *FindRequest) (*DeleteResult, error)
	DeleteTopicById(context.Context, *GetRequest) (*DeleteResult, error)
	// cards model
	FindCardList(*FindRequest, LearnService_FindCardListServer) error
	GetCardById(context.Context, *GetRequest) (*Topic, error)
	CreateCard(context.Context, *CreateTopicRequest) (*Topic, error)
	UpdateCard(context.Context, *UpdateTopicRequest) (*Topic, error)
	UpdateCardById(context.Context, *UpdateLanguageByIdRequest) (*Topic, error)
	DeleteCard(context.Context, *FindRequest) (*DeleteResult, error)
	DeleteCardById(context.Context, *GetRequest) (*DeleteResult, error)
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
}

// UnimplementedLearnServiceServer can be embedded to have forward compatible implementations.
type UnimplementedLearnServiceServer struct {
}

func (*UnimplementedLearnServiceServer) FindLanguageList(req *FindRequest, srv LearnService_FindLanguageListServer) error {
	return status.Errorf(codes.Unimplemented, "method FindLanguageList not implemented")
}
func (*UnimplementedLearnServiceServer) GetLanguageById(ctx context.Context, req *GetRequest) (*Language, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLanguageById not implemented")
}
func (*UnimplementedLearnServiceServer) CreateLanguage(ctx context.Context, req *CreateLanguageRequest) (*Language, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLanguage not implemented")
}
func (*UnimplementedLearnServiceServer) UpdateLanguage(ctx context.Context, req *UpdateLanguageRequest) (*Language, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLanguage not implemented")
}
func (*UnimplementedLearnServiceServer) UpdateLanguageById(ctx context.Context, req *UpdateLanguageByIdRequest) (*Language, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLanguageById not implemented")
}
func (*UnimplementedLearnServiceServer) DeleteLanguage(ctx context.Context, req *FindRequest) (*DeleteResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLanguage not implemented")
}
func (*UnimplementedLearnServiceServer) DeleteLanguageById(ctx context.Context, req *GetRequest) (*DeleteResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLanguageById not implemented")
}
func (*UnimplementedLearnServiceServer) FindTopicList(req *FindRequest, srv LearnService_FindTopicListServer) error {
	return status.Errorf(codes.Unimplemented, "method FindTopicList not implemented")
}
func (*UnimplementedLearnServiceServer) GetTopicById(ctx context.Context, req *GetRequest) (*Topic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopicById not implemented")
}
func (*UnimplementedLearnServiceServer) CreateTopic(ctx context.Context, req *CreateTopicRequest) (*Topic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTopic not implemented")
}
func (*UnimplementedLearnServiceServer) UpdateTopic(ctx context.Context, req *UpdateTopicRequest) (*Topic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTopic not implemented")
}
func (*UnimplementedLearnServiceServer) UpdateTopicById(ctx context.Context, req *UpdateLanguageByIdRequest) (*Topic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTopicById not implemented")
}
func (*UnimplementedLearnServiceServer) DeleteTopic(ctx context.Context, req *FindRequest) (*DeleteResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTopic not implemented")
}
func (*UnimplementedLearnServiceServer) DeleteTopicById(ctx context.Context, req *GetRequest) (*DeleteResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTopicById not implemented")
}
func (*UnimplementedLearnServiceServer) FindCardList(req *FindRequest, srv LearnService_FindCardListServer) error {
	return status.Errorf(codes.Unimplemented, "method FindCardList not implemented")
}
func (*UnimplementedLearnServiceServer) GetCardById(ctx context.Context, req *GetRequest) (*Topic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCardById not implemented")
}
func (*UnimplementedLearnServiceServer) CreateCard(ctx context.Context, req *CreateTopicRequest) (*Topic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCard not implemented")
}
func (*UnimplementedLearnServiceServer) UpdateCard(ctx context.Context, req *UpdateTopicRequest) (*Topic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCard not implemented")
}
func (*UnimplementedLearnServiceServer) UpdateCardById(ctx context.Context, req *UpdateLanguageByIdRequest) (*Topic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCardById not implemented")
}
func (*UnimplementedLearnServiceServer) DeleteCard(ctx context.Context, req *FindRequest) (*DeleteResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCard not implemented")
}
func (*UnimplementedLearnServiceServer) DeleteCardById(ctx context.Context, req *GetRequest) (*DeleteResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCardById not implemented")
}
func (*UnimplementedLearnServiceServer) SayHello(ctx context.Context, req *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}

func RegisterLearnServiceServer(s *grpc.Server, srv LearnServiceServer) {
	s.RegisterService(&_LearnService_serviceDesc, srv)
}

func _LearnService_FindLanguageList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FindRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LearnServiceServer).FindLanguageList(m, &learnServiceFindLanguageListServer{stream})
}

type LearnService_FindLanguageListServer interface {
	Send(*Language) error
	grpc.ServerStream
}

type learnServiceFindLanguageListServer struct {
	grpc.ServerStream
}

func (x *learnServiceFindLanguageListServer) Send(m *Language) error {
	return x.ServerStream.SendMsg(m)
}

func _LearnService_GetLanguageById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearnServiceServer).GetLanguageById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/learn.LearnService/GetLanguageById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearnServiceServer).GetLanguageById(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearnService_CreateLanguage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLanguageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearnServiceServer).CreateLanguage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/learn.LearnService/CreateLanguage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearnServiceServer).CreateLanguage(ctx, req.(*CreateLanguageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearnService_UpdateLanguage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLanguageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearnServiceServer).UpdateLanguage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/learn.LearnService/UpdateLanguage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearnServiceServer).UpdateLanguage(ctx, req.(*UpdateLanguageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearnService_UpdateLanguageById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLanguageByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearnServiceServer).UpdateLanguageById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/learn.LearnService/UpdateLanguageById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearnServiceServer).UpdateLanguageById(ctx, req.(*UpdateLanguageByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearnService_DeleteLanguage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearnServiceServer).DeleteLanguage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/learn.LearnService/DeleteLanguage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearnServiceServer).DeleteLanguage(ctx, req.(*FindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearnService_DeleteLanguageById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearnServiceServer).DeleteLanguageById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/learn.LearnService/DeleteLanguageById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearnServiceServer).DeleteLanguageById(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearnService_FindTopicList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FindRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LearnServiceServer).FindTopicList(m, &learnServiceFindTopicListServer{stream})
}

type LearnService_FindTopicListServer interface {
	Send(*Topic) error
	grpc.ServerStream
}

type learnServiceFindTopicListServer struct {
	grpc.ServerStream
}

func (x *learnServiceFindTopicListServer) Send(m *Topic) error {
	return x.ServerStream.SendMsg(m)
}

func _LearnService_GetTopicById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearnServiceServer).GetTopicById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/learn.LearnService/GetTopicById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearnServiceServer).GetTopicById(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearnService_CreateTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearnServiceServer).CreateTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/learn.LearnService/CreateTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearnServiceServer).CreateTopic(ctx, req.(*CreateTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearnService_UpdateTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearnServiceServer).UpdateTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/learn.LearnService/UpdateTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearnServiceServer).UpdateTopic(ctx, req.(*UpdateTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearnService_UpdateTopicById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLanguageByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearnServiceServer).UpdateTopicById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/learn.LearnService/UpdateTopicById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearnServiceServer).UpdateTopicById(ctx, req.(*UpdateLanguageByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearnService_DeleteTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearnServiceServer).DeleteTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/learn.LearnService/DeleteTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearnServiceServer).DeleteTopic(ctx, req.(*FindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearnService_DeleteTopicById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearnServiceServer).DeleteTopicById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/learn.LearnService/DeleteTopicById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearnServiceServer).DeleteTopicById(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearnService_FindCardList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FindRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LearnServiceServer).FindCardList(m, &learnServiceFindCardListServer{stream})
}

type LearnService_FindCardListServer interface {
	Send(*Topic) error
	grpc.ServerStream
}

type learnServiceFindCardListServer struct {
	grpc.ServerStream
}

func (x *learnServiceFindCardListServer) Send(m *Topic) error {
	return x.ServerStream.SendMsg(m)
}

func _LearnService_GetCardById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearnServiceServer).GetCardById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/learn.LearnService/GetCardById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearnServiceServer).GetCardById(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearnService_CreateCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearnServiceServer).CreateCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/learn.LearnService/CreateCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearnServiceServer).CreateCard(ctx, req.(*CreateTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearnService_UpdateCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearnServiceServer).UpdateCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/learn.LearnService/UpdateCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearnServiceServer).UpdateCard(ctx, req.(*UpdateTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearnService_UpdateCardById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLanguageByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearnServiceServer).UpdateCardById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/learn.LearnService/UpdateCardById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearnServiceServer).UpdateCardById(ctx, req.(*UpdateLanguageByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearnService_DeleteCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearnServiceServer).DeleteCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/learn.LearnService/DeleteCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearnServiceServer).DeleteCard(ctx, req.(*FindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearnService_DeleteCardById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearnServiceServer).DeleteCardById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/learn.LearnService/DeleteCardById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearnServiceServer).DeleteCardById(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearnService_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearnServiceServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/learn.LearnService/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearnServiceServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LearnService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "learn.LearnService",
	HandlerType: (*LearnServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLanguageById",
			Handler:    _LearnService_GetLanguageById_Handler,
		},
		{
			MethodName: "CreateLanguage",
			Handler:    _LearnService_CreateLanguage_Handler,
		},
		{
			MethodName: "UpdateLanguage",
			Handler:    _LearnService_UpdateLanguage_Handler,
		},
		{
			MethodName: "UpdateLanguageById",
			Handler:    _LearnService_UpdateLanguageById_Handler,
		},
		{
			MethodName: "DeleteLanguage",
			Handler:    _LearnService_DeleteLanguage_Handler,
		},
		{
			MethodName: "DeleteLanguageById",
			Handler:    _LearnService_DeleteLanguageById_Handler,
		},
		{
			MethodName: "GetTopicById",
			Handler:    _LearnService_GetTopicById_Handler,
		},
		{
			MethodName: "CreateTopic",
			Handler:    _LearnService_CreateTopic_Handler,
		},
		{
			MethodName: "UpdateTopic",
			Handler:    _LearnService_UpdateTopic_Handler,
		},
		{
			MethodName: "UpdateTopicById",
			Handler:    _LearnService_UpdateTopicById_Handler,
		},
		{
			MethodName: "DeleteTopic",
			Handler:    _LearnService_DeleteTopic_Handler,
		},
		{
			MethodName: "DeleteTopicById",
			Handler:    _LearnService_DeleteTopicById_Handler,
		},
		{
			MethodName: "GetCardById",
			Handler:    _LearnService_GetCardById_Handler,
		},
		{
			MethodName: "CreateCard",
			Handler:    _LearnService_CreateCard_Handler,
		},
		{
			MethodName: "UpdateCard",
			Handler:    _LearnService_UpdateCard_Handler,
		},
		{
			MethodName: "UpdateCardById",
			Handler:    _LearnService_UpdateCardById_Handler,
		},
		{
			MethodName: "DeleteCard",
			Handler:    _LearnService_DeleteCard_Handler,
		},
		{
			MethodName: "DeleteCardById",
			Handler:    _LearnService_DeleteCardById_Handler,
		},
		{
			MethodName: "SayHello",
			Handler:    _LearnService_SayHello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FindLanguageList",
			Handler:       _LearnService_FindLanguageList_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FindTopicList",
			Handler:       _LearnService_FindTopicList_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FindCardList",
			Handler:       _LearnService_FindCardList_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/learn/learn.proto",
}
